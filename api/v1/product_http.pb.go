// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.0.4

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type ProductHTTPServer interface {
	Search(context.Context, *SearchReq) (*SearchResp, error)
	Upload(context.Context, *UploadReq) (*UploadResp, error)
}

func RegisterProductHTTPServer(s *http.Server, srv ProductHTTPServer) {
	r := s.Route("/")
	r.POST("/product/upload", _Product_Upload0_HTTP_Handler(srv))
	r.POST("/product/search", _Product_Search0_HTTP_Handler(srv))
}

func _Product_Upload0_HTTP_Handler(srv ProductHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UploadReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.v1.Product/Upload")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Upload(ctx, req.(*UploadReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UploadResp)
		return ctx.Result(200, reply)
	}
}

func _Product_Search0_HTTP_Handler(srv ProductHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SearchReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.v1.Product/Search")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Search(ctx, req.(*SearchReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SearchResp)
		return ctx.Result(200, reply)
	}
}

type ProductHTTPClient interface {
	Search(ctx context.Context, req *SearchReq, opts ...http.CallOption) (rsp *SearchResp, err error)
	Upload(ctx context.Context, req *UploadReq, opts ...http.CallOption) (rsp *UploadResp, err error)
}

type ProductHTTPClientImpl struct {
	cc *http.Client
}

func NewProductHTTPClient(client *http.Client) ProductHTTPClient {
	return &ProductHTTPClientImpl{client}
}

func (c *ProductHTTPClientImpl) Search(ctx context.Context, in *SearchReq, opts ...http.CallOption) (*SearchResp, error) {
	var out SearchResp
	pattern := "/product/search"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.v1.Product/Search"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ProductHTTPClientImpl) Upload(ctx context.Context, in *UploadReq, opts ...http.CallOption) (*UploadResp, error) {
	var out UploadResp
	pattern := "/product/upload"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.v1.Product/Upload"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
