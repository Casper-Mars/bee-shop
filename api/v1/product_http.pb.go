// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.5.0
// - protoc             v3.17.3
// source: v1/product.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationProductSearchItem = "/api.v1.Product/SearchItem"

type ProductHTTPServer interface {
	SearchItem(context.Context, *SearchItemRequest) (*SearchItemResponse, error)
}

func RegisterProductHTTPServer(s *http.Server, srv ProductHTTPServer) {
	r := s.Route("/")
	r.POST("/product/searchItem", _Product_SearchItem0_HTTP_Handler(srv))
}

func _Product_SearchItem0_HTTP_Handler(srv ProductHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SearchItemRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProductSearchItem)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SearchItem(ctx, req.(*SearchItemRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SearchItemResponse)
		return ctx.Result(200, reply)
	}
}

type ProductHTTPClient interface {
	SearchItem(ctx context.Context, req *SearchItemRequest, opts ...http.CallOption) (rsp *SearchItemResponse, err error)
}

type ProductHTTPClientImpl struct {
	cc *http.Client
}

func NewProductHTTPClient(client *http.Client) ProductHTTPClient {
	return &ProductHTTPClientImpl{client}
}

func (c *ProductHTTPClientImpl) SearchItem(ctx context.Context, in *SearchItemRequest, opts ...http.CallOption) (*SearchItemResponse, error) {
	var out SearchItemResponse
	pattern := "/product/searchItem"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationProductSearchItem))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
